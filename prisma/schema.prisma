// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "core", "auth", "org", "log"]
}

// =============================================================================
// üìã ENUMS
// =============================================================================

/// Enum para a√ß√µes de auditoria do sistema
enum AuditAction {
  INSERT
  UPDATE
  DELETE

  @@map("audit_action")
  @@schema("public")
}

// =============================================================================
// üë§ USERS & AUTHENTICATION MODELS
// =============================================================================

/// Status dos utilizadores (ativo, inativo, pendente, etc.)
model UserStatus {
  statusId          Int    @id @default(autoincrement()) @map("status_id")
  statusName        String @unique @map("status_name") @db.VarChar(50)
  statusDescription String @map("status_description") @db.Text

  // Relations
  users User[]

  @@map("tbl_user_status")
  @@schema("core")
  @@index([statusName])
}

/// Utilizadores principais do sistema
model User {
  userId       Int       @id @default(autoincrement()) @map("user_id")
  username     String    @unique @db.VarChar(50)
  firstname    String    @map("firstname") @db.VarChar(100)
  lastname     String    @map("lastname") @db.VarChar(100)
  email        String?   @db.VarChar(255) // Opcional - nem todos t√™m email
  passwordHash String?   @map("password_hash") @db.VarChar(255) // Opcional - definido no primeiro acesso
  userStatusId Int       @map("user_status_id")
  userIsLocked Boolean   @default(false) @map("user_is_locked")
  userAvatar   String?   @map("user_avatar") @db.VarChar(500)
  userCreatedAt DateTime @default(now()) @map("user_created_at")
  userUpdatedAt DateTime @updatedAt @map("user_updated_at")
  createdBy    Int?      @map("created_by")
  updatedBy    Int?      @map("updated_by")

  // Relations para auditoria de cria√ß√£o/atualiza√ß√£o
  creator      User?     @relation("UserCreated", fields: [createdBy], references: [userId])
  updater      User?     @relation("UserUpdated", fields: [updatedBy], references: [userId])
  userLastLogin DateTime? @map("user_last_login")
  deletedAt    DateTime? @map("deleted_at") // Soft delete
  version      Int       @default(1) // Optimistic concurrency control

  // Relations
  userStatus UserStatus @relation(fields: [userStatusId], references: [statusId], onDelete: Restrict)
  
  // User Roles (Many-to-Many)
  userRoles UserRole[]
  
  // Organization Relations (Many-to-Many)
  userFactories  UserFactory[]
  userTeams      UserTeam[]
  userDepartments UserDepartment[]
  userWarehouses UserWarehouse[]
  userSetors     UserSetor[]
  
  // Security & Logs
  loginAttempts       LoginAttempt[]
  activityLogs        UserActivityLog[]
  passwordResetLogs   PasswordResetLog[]
  passwordHistory     UserPasswordHistory[]
  userSessions        UserSession[]
  refreshTokens       RefreshToken[]
  mfaTokens           MfaToken[]
  mfaFactors          MfaFactor[]
  auditLogs           AuditLog[]

  // Relations inversas para auditoria de cria√ß√£o/atualiza√ß√£o
  usersCreated        User[]      @relation("UserCreated")
  usersUpdated        User[]      @relation("UserUpdated")
  factoriesCreated    Factory[]   @relation("FactoryCreated")
  factoriesUpdated    Factory[]   @relation("FactoryUpdated")
  teamsCreated        Team[]      @relation("TeamCreated")
  teamsUpdated        Team[]      @relation("TeamUpdated")
  departmentsCreated  Department[] @relation("DepartmentCreated")
  departmentsUpdated  Department[] @relation("DepartmentUpdated")
  warehousesCreated   Warehouse[] @relation("WarehouseCreated")
  warehousesUpdated   Warehouse[] @relation("WarehouseUpdated")
  setorsCreated       Setor[]     @relation("SetorCreated")
  setorsUpdated       Setor[]     @relation("SetorUpdated")

  @@map("tbl_users")
  @@schema("core")
  @@index([email])
  @@index([userStatusId])
  @@index([userCreatedAt])
  @@index([deletedAt])
  // √çndices √∫nicos parciais (WHERE deleted_at IS NULL) n√£o s√£o suportados diretamente pelo Prisma. Devem ser criados manualmente via SQL ap√≥s a migration.
  @@index([userStatusId, userIsLocked])
}

/// Roles/Fun√ß√µes do sistema
model Role {
  roleId      Int    @id @default(autoincrement()) @map("role_id")
  roleName    String @unique @map("role_name") @db.VarChar(100)
  description String @db.Text

  // Relations
  userRoles UserRole[]

  @@map("tbl_roles")
  @@schema("core")
  @@index([roleName])
}

/// Rela√ß√£o Many-to-Many entre Users e Roles
model UserRole {
  id       Int      @id @default(autoincrement()) // Para futura extensibilidade
  userId   Int      @map("user_id")
  roleId   Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at") // Timestamp da atribui√ß√£o

  // Relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [roleId], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("tbl_user_roles")
  @@schema("core")
  @@index([assignedAt])
}

// =============================================================================
// üè≠ ORGANIZATION MODELS
// =============================================================================

/// F√°bricas/Instala√ß√µes da empresa
model Factory {
  factoryId Int    @id @default(autoincrement()) @map("factory_id")
  name      String @db.VarChar(200)
  location  String @db.VarChar(300)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int?    @map("created_by")
  updatedBy Int?    @map("updated_by")

  creator   User?   @relation("FactoryCreated", fields: [createdBy], references: [userId])
  updater   User?   @relation("FactoryUpdated", fields: [updatedBy], references: [userId])

  // Relations
  teams       Team[]
  departments Department[]
  warehouses  Warehouse[]
  setors      Setor[]
  
  // User associations
  userFactories UserFactory[]

  @@map("tbl_factories")
  @@schema("org")
  @@index([name])
}

/// Equipas dentro das f√°bricas
model Team {
  teamId    Int    @id @default(autoincrement()) @map("team_id")
  factoryId Int    @map("factory_id")
  name      String @db.VarChar(200)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int?    @map("created_by")
  updatedBy Int?    @map("updated_by")

  creator   User?   @relation("TeamCreated", fields: [createdBy], references: [userId])
  updater   User?   @relation("TeamUpdated", fields: [updatedBy], references: [userId])

  // Relations
  factory   Factory    @relation(fields: [factoryId], references: [factoryId], onDelete: Cascade)
  userTeams UserTeam[]

  @@map("tbl_teams")
  @@schema("org")
  @@index([factoryId])
  @@index([name])
}

/// Departamentos dentro das f√°bricas
model Department {
  depId     Int    @id @default(autoincrement()) @map("dep_id")
  factoryId Int    @map("factory_id")
  name      String @db.VarChar(200)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int?    @map("created_by")
  updatedBy Int?    @map("updated_by")

  creator   User?   @relation("DepartmentCreated", fields: [createdBy], references: [userId])
  updater   User?   @relation("DepartmentUpdated", fields: [updatedBy], references: [userId])

  // Relations
  factory         Factory          @relation(fields: [factoryId], references: [factoryId], onDelete: Cascade)
  userDepartments UserDepartment[]

  @@map("tbl_departments")
  @@schema("org")
  @@index([factoryId])
  @@index([name])
}

/// Armaz√©ns dentro das f√°bricas
model Warehouse {
  warehouseId Int    @id @default(autoincrement()) @map("warehouse_id")
  factoryId   Int    @map("factory_id")
  code        String @db.VarChar(50)
  name        String @db.VarChar(200)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy   Int?    @map("created_by")
  updatedBy   Int?    @map("updated_by")

  creator     User?   @relation("WarehouseCreated", fields: [createdBy], references: [userId])
  updater     User?   @relation("WarehouseUpdated", fields: [updatedBy], references: [userId])

  // Relations
  factory        Factory         @relation(fields: [factoryId], references: [factoryId], onDelete: Cascade)
  userWarehouses UserWarehouse[]

  @@map("tbl_warehouses")
  @@schema("org")
  @@unique([factoryId, code])
  @@index([factoryId])
  @@index([code])
}

/// Setores dentro das f√°bricas
model Setor {
  setorId   Int     @id @default(autoincrement()) @map("setor_id")
  factoryId Int     @map("factory_id")
  name      String  @db.VarChar(200)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int?    @map("created_by")
  updatedBy Int?    @map("updated_by")

  creator   User?   @relation("SetorCreated", fields: [createdBy], references: [userId])
  updater   User?   @relation("SetorUpdated", fields: [updatedBy], references: [userId])
  acronym   String? @db.VarChar(10) // Sigla/Acr√¥nimo do setor

  // Relations
  factory    Factory     @relation(fields: [factoryId], references: [factoryId], onDelete: Cascade)
  userSetors UserSetor[]

  @@map("tbl_setors")
  @@schema("org")
  @@index([factoryId])
  @@index([name])
  @@index([acronym])
}

// =============================================================================
// üîó USER-ORGANIZATION ASSOCIATIONS (Many-to-Many)
// =============================================================================

/// Associa√ß√£o Many-to-Many: Users ‚Üî Factories
model UserFactory {
  id        Int      @id @default(autoincrement()) // Para futura extensibilidade
  userId    Int      @map("user_id")
  factoryId Int      @map("factory_id")
  assignedAt DateTime @default(now()) @map("assigned_at") // Timestamp da atribui√ß√£o

  // Relations
  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  factory Factory @relation(fields: [factoryId], references: [factoryId], onDelete: Cascade)

  @@unique([userId, factoryId])
  @@map("tbl_user_factories")
  @@schema("org")
  @@index([assignedAt])
}

/// Associa√ß√£o Many-to-Many: Users ‚Üî Teams
model UserTeam {
  id        Int      @id @default(autoincrement()) // Para futura extensibilidade
  userId    Int      @map("user_id")
  teamId    Int      @map("team_id")
  assignedAt DateTime @default(now()) @map("assigned_at") // Timestamp da atribui√ß√£o

  // Relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [teamId], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("tbl_user_teams")
  @@schema("org")
  @@index([assignedAt])
}

/// Associa√ß√£o Many-to-Many: Users ‚Üî Departments
model UserDepartment {
  id        Int      @id @default(autoincrement()) // Para futura extensibilidade
  userId    Int      @map("user_id")
  depId     Int      @map("dep_id")
  assignedAt DateTime @default(now()) @map("assigned_at") // Timestamp da atribui√ß√£o

  // Relations
  user       User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  department Department @relation(fields: [depId], references: [depId], onDelete: Cascade)

  @@unique([userId, depId])
  @@map("tbl_user_departments")
  @@schema("org")
  @@index([assignedAt])
}

/// Associa√ß√£o Many-to-Many: Users ‚Üî Warehouses
model UserWarehouse {
  id         Int      @id @default(autoincrement()) // Para futura extensibilidade
  userId     Int      @map("user_id")
  warehouseId Int     @map("warehouse_id")
  assignedAt DateTime @default(now()) @map("assigned_at") // Timestamp da atribui√ß√£o

  // Relations
  user      User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  warehouse Warehouse @relation(fields: [warehouseId], references: [warehouseId], onDelete: Cascade)

  @@unique([userId, warehouseId])
  @@map("tbl_user_warehouses")
  @@schema("org")
  @@index([assignedAt])
}

/// Associa√ß√£o Many-to-Many: Users ‚Üî Setors
model UserSetor {
  id        Int      @id @default(autoincrement()) // Para futura extensibilidade
  userId    Int      @map("user_id")
  setorId   Int      @map("setor_id")
  assignedAt DateTime @default(now()) @map("assigned_at") // Timestamp da atribui√ß√£o

  // Relations
  user  User  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  setor Setor @relation(fields: [setorId], references: [setorId], onDelete: Cascade)

  @@unique([userId, setorId])
  @@map("tbl_user_setors")
  @@schema("org")
  @@index([assignedAt])
}

// =============================================================================
// üõ°Ô∏è SECURITY & AUDIT MODELS
// =============================================================================

/// Log de tentativas de login (sucesso e falhadas)
model LoginAttempt {
  attemptId     Int      @id @default(autoincrement()) @map("attempt_id")
  userId        Int?     @map("user_id")
  attemptAt     DateTime @default(now()) @map("attempt_at") @db.Timestamptz(3)
  isSuccessful  Boolean  @map("is_successful")
  action        String   @db.VarChar(100)
  ipAddress     String   @map("ip_address") @db.VarChar(45) // IPv4/IPv6 compat√≠vel
  userAgent     String?  @map("user_agent") @db.Text

  // Relations
  user User? @relation(fields: [userId], references: [userId], onDelete: SetNull)

  @@map("tbl_login_attempts")
  @@schema("auth")
  @@index([userId])
  @@index([attemptAt])
  @@index([ipAddress])
  @@index([isSuccessful])
  @@index([action]) // √çndice para an√°lise forense
}

/// Log de atividades dos utilizadores
model UserActivityLog {
  logId      Int      @id @default(autoincrement()) @map("log_id")
  userId     Int      @map("user_id")
  action     String   @db.VarChar(200)
  entityId   Int?     @map("entity_id")
  entityType String?  @map("entity_type") @db.VarChar(100)
  actionAt   DateTime @default(now()) @map("action_at") @db.Timestamptz(3)
  ipAddress  String   @map("ip_address") @db.VarChar(45)
  sessionId  String?  @map("session_id")
  correlationId String? @map("correlation_id") @db.VarChar(100)
  userAgent  String?  @map("user_agent") @db.Text

  // Relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  session UserSession? @relation("SessionActivityLogs", fields: [sessionId], references: [sessionId], onDelete: SetNull)

  @@map("tbl_user_activity_logs")
  @@schema("log")
  @@index([userId])
  @@index([actionAt])
  @@index([action])
  @@index([entityType])
}

/// Log de reset de passwords
model PasswordResetLog {
  resetId    Int      @id @default(autoincrement()) @map("reset_id")
  userId     Int      @map("user_id")
  resetToken String   @map("reset_token") @db.VarChar(255)
  requestAt  DateTime @default(now()) @map("request_at") @db.Timestamptz(3)
  ipAddress  String   @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text

  // Relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("tbl_password_reset_logs")
  @@schema("auth")
  @@index([userId])
  @@index([resetToken])
  @@index([requestAt])
}

/// Hist√≥rico de passwords dos utilizadores
model UserPasswordHistory {
  historyId    Int      @id @default(autoincrement()) @map("history_id")
  userId       Int      @map("user_id")
  passwordHash String   @map("password_hash") @db.VarChar(255)
  changedAt    DateTime @default(now()) @map("changed_at") @db.Timestamptz(3)

  // Relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("tbl_user_password_history")
  @@schema("log")
  @@index([userId])
  @@index([changedAt])
}

/// Sess√µes ativas dos utilizadores (JWT tracking)
model UserSession {
  sessionId String    @id @default(cuid()) @map("session_id")
  userId    Int       @map("user_id")
  jwtId     String    @unique @map("jwt_id") @db.VarChar(255)
  loginAt   DateTime  @default(now()) @map("login_at") @db.Timestamptz(3)
  logoutAt  DateTime? @map("logout_at") @db.Timestamptz(3)
  isRevoked Boolean   @default(false) @map("is_revoked")
  ipAddress String    @map("ip_address") @db.VarChar(45)
  userAgent String?   @map("user_agent") @db.Text
  refreshTokenHash String? @map("refresh_token_hash") @db.VarChar(255)
  rotatedFromJti String? @map("rotated_from_jti") @db.VarChar(255)
  expiresAt DateTime? @map("expires_at") @db.Timestamptz(3)

  // Relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  activityLogs UserActivityLog[] @relation("SessionActivityLogs")

  @@map("tbl_user_sessions")
  @@schema("auth")
  @@index([userId])
  @@index([jwtId])
  @@index([loginAt])
  @@index([isRevoked])
  @@index([userId, isRevoked])
  @@index([expiresAt])
}

/// Refresh Tokens para renova√ß√£o de access tokens
model RefreshToken {
  tokenId   String    @id @default(cuid()) @map("token_id")
  userId    Int       @map("user_id")
  tokenHash String    @unique @map("token_hash") @db.VarChar(255)
  sessionId String?   @map("session_id") // Liga√ß√£o √† sess√£o
  expiresAt DateTime  @map("expires_at") @db.Timestamptz(3)
  isRevoked Boolean   @default(false) @map("is_revoked")
  revokedAt DateTime? @map("revoked_at") @db.Timestamptz(3)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  ipAddress String    @map("ip_address") @db.VarChar(45)
  userAgent String?   @map("user_agent") @db.Text
  rememberMe Boolean  @default(false) @map("remember_me") // Marca se foi criado com "Remember me"

  // Relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("tbl_refresh_tokens")
  @@schema("auth")
  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@index([isRevoked])
  @@index([userId, isRevoked])
  @@index([sessionId])
}

/// Tokens MFA tempor√°rios (OTP)
model MfaToken {
  mfaId     Int      @id @default(autoincrement()) @map("mfa_id")
  userId    Int      @map("user_id")
  token     String   @unique @db.VarChar(255) // √önico para evitar colis√µes
  expiresAt DateTime @map("expires_at") @db.Timestamptz(3)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // Relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("tbl_mfa_tokens")
  @@schema("auth")
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

/// Fatores MFA permanentes (TOTP, WebAuthn, SMS, etc.)
model MfaFactor {
  factorId   Int      @id @default(autoincrement()) @map("factor_id")
  userId     Int     @map("user_id")
  type       String  @db.VarChar(50) // Ex: TOTP, WebAuthn, SMS
  label      String? @db.VarChar(100)
  secret     String? @db.VarChar(255) // Encriptado
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("tbl_mfa_factors")
  @@schema("auth")
  @@index([userId])
  @@index([type])
}

/// Logs de auditoria do sistema (tracking de todas as mudan√ßas)
model AuditLog {
  auditId    Int         @id @default(autoincrement()) @map("audit_id")
  userId     Int?        @map("user_id")
  entitySchema String?   @map("entity_schema") @db.VarChar(50)
  entityTable  String?   @map("entity_table") @db.VarChar(100)
  entityPk     String?   @map("entity_pk") @db.VarChar(100)
  tableName  String      @map("table_name") @db.VarChar(100)
  action     AuditAction // Enum com INSERT, UPDATE, DELETE
  beforeData Json?       @map("before_data") // Dados antes da mudan√ßa
  afterData  Json?       @map("after_data")  // Dados depois da mudan√ßa
  changedAt  DateTime    @default(now()) @map("changed_at") @db.Timestamptz(3)
  version    Int         @default(1) // Optimistic concurrency control

  // Relations
  user User? @relation(fields: [userId], references: [userId], onDelete: SetNull)

  @@map("tbl_audit_logs")
  @@schema("log")
  @@index([userId])
  @@index([tableName])
  @@index([entitySchema])
  @@index([entityTable])
  @@index([entityPk])
  @@index([action])
  @@index([changedAt])
}
